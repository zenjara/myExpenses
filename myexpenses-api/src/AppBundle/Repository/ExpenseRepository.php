<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Expense;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;

/**
 * ExpenseRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ExpenseRepository extends EntityRepository
{
    public function add(Expense $expense)
    {
        $this->_em->persist($expense);
        $this->_em->flush();
    }

    public function remove(Expense $expense)
    {
        $this->_em->remove($expense);
        $this->_em->flush();
    }

    public function findAllByUserQueryBuilder($user, $sorting)
    {
        $qb = $this->createQueryBuilder('expense')
            ->where('expense.user =:user')
            ->setParameter('user', $user);

        if (empty($sorting)) {
            $qb->orderBy('expense.createdAt', 'DESC');
        } else {
            $this->applySorting($qb, $sorting);
        }

        return $qb;
    }

    /**
     * @param QueryBuilder $queryBuilder
     * @param array $sorting
     */
    protected function applySorting(QueryBuilder $queryBuilder, array $sorting = [])
    {
        foreach ($sorting as $property => $order) {
            if (!in_array($property, array_merge($this->_class->getAssociationNames(), $this->_class->getFieldNames()), true)) {
                continue;
            }

            if (!empty($order)) {
                $queryBuilder->addOrderBy($this->getPropertyName($property), $order);
            }
        }
    }

    /**
     * @param string $name
     *
     * @return string
     */
    protected function getPropertyName(string $name): string
    {
        if (false === strpos($name, '.')) {
            return 'expense' . '.' . $name;
        }

        return $name;
    }

    public function findDailyTotalByCurrency($currency, $user)
    {
        $startOfToday = new \DateTime("today");
        $endOfToday = (new \DateTime("today"))->setTime("23", "59", "59");

        return $this->createQueryBuilder('expense')
            ->where('expense.createdAt BETWEEN :todayStart AND :todayEnd')
            ->andWhere('expense.currency =:currency')
            ->andWhere('expense.user =:user')
            ->setParameter('todayStart', $startOfToday)
            ->setParameter('todayEnd', $endOfToday)
            ->setParameter('currency', $currency)
            ->setParameter('user', $user)
            ->select('SUM(expense.amount) as amount')
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function findMonthlyTotalByCurrency($currency, $user)
    {
        $firstDayOfMonth = new \DateTime('first day of this month');
        $lastDayOfMonth = (new \DateTime('last day of this month'))->setTime("23", "59", "59");

        return $this->createQueryBuilder('expense')
            ->where('expense.createdAt BETWEEN :firstDay AND :lastDay')
            ->andWhere('expense.currency =:currency')
            ->andWhere('expense.user =:user')
            ->setParameter('firstDay', $firstDayOfMonth)
            ->setParameter('lastDay', $lastDayOfMonth)
            ->setParameter('currency', $currency)
            ->setParameter('user', $user)
            ->select('SUM(expense.amount) as amount')
            ->getQuery()
            ->getSingleScalarResult();
    }
}
